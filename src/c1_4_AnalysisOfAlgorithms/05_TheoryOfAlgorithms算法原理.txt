Best case
Worst case
Average case

设计思路：
    能以最坏情况考虑就以最坏情况考虑
    不然就让算法满足随机情况下的普遍高效性

Big Theta：表示增长阶数的方法
Big Oh：算法性能的上界
Big Omega：算法性能的下界

利用大O和大Ω来进行判断是否有可优化的余地
如果两者相等那么就找到了最佳算法，且此算法已无法被继续优化
如果无法确定上下界，那么此问题就是一个开放问题，可以被研究并有可能被优化
但是证明一般很困难很复杂